// Code generated by protoc-gen-go.
// source: content_manifest.proto
// DO NOT EDIT!

package protobuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package protobuf is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type ContentManifestPayload struct {
	Mappings         []*ContentManifestPayload_FileMapping `protobuf:"bytes,1,rep,name=mappings" json:"mappings,omitempty"`
	XXX_unrecognized []byte                                `json:"-"`
}

func (m *ContentManifestPayload) Reset()                    { *m = ContentManifestPayload{} }
func (m *ContentManifestPayload) String() string            { return proto.CompactTextString(m) }
func (*ContentManifestPayload) ProtoMessage()               {}
func (*ContentManifestPayload) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ContentManifestPayload) GetMappings() []*ContentManifestPayload_FileMapping {
	if m != nil {
		return m.Mappings
	}
	return nil
}

type ContentManifestPayload_FileMapping struct {
	Filename         *string                                         `protobuf:"bytes,1,opt,name=filename" json:"filename,omitempty"`
	Size             *uint64                                         `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
	Flags            *uint32                                         `protobuf:"varint,3,opt,name=flags" json:"flags,omitempty"`
	ShaFilename      []byte                                          `protobuf:"bytes,4,opt,name=sha_filename" json:"sha_filename,omitempty"`
	ShaContent       []byte                                          `protobuf:"bytes,5,opt,name=sha_content" json:"sha_content,omitempty"`
	Chunks           []*ContentManifestPayload_FileMapping_ChunkData `protobuf:"bytes,6,rep,name=chunks" json:"chunks,omitempty"`
	XXX_unrecognized []byte                                          `json:"-"`
}

func (m *ContentManifestPayload_FileMapping) Reset()         { *m = ContentManifestPayload_FileMapping{} }
func (m *ContentManifestPayload_FileMapping) String() string { return proto.CompactTextString(m) }
func (*ContentManifestPayload_FileMapping) ProtoMessage()    {}
func (*ContentManifestPayload_FileMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 0}
}

func (m *ContentManifestPayload_FileMapping) GetFilename() string {
	if m != nil && m.Filename != nil {
		return *m.Filename
	}
	return ""
}

func (m *ContentManifestPayload_FileMapping) GetSize() uint64 {
	if m != nil && m.Size != nil {
		return *m.Size
	}
	return 0
}

func (m *ContentManifestPayload_FileMapping) GetFlags() uint32 {
	if m != nil && m.Flags != nil {
		return *m.Flags
	}
	return 0
}

func (m *ContentManifestPayload_FileMapping) GetShaFilename() []byte {
	if m != nil {
		return m.ShaFilename
	}
	return nil
}

func (m *ContentManifestPayload_FileMapping) GetShaContent() []byte {
	if m != nil {
		return m.ShaContent
	}
	return nil
}

func (m *ContentManifestPayload_FileMapping) GetChunks() []*ContentManifestPayload_FileMapping_ChunkData {
	if m != nil {
		return m.Chunks
	}
	return nil
}

type ContentManifestPayload_FileMapping_ChunkData struct {
	Sha              []byte  `protobuf:"bytes,1,opt,name=sha" json:"sha,omitempty"`
	Crc              *uint32 `protobuf:"fixed32,2,opt,name=crc" json:"crc,omitempty"`
	Offset           *uint64 `protobuf:"varint,3,opt,name=offset" json:"offset,omitempty"`
	CbOriginal       *uint32 `protobuf:"varint,4,opt,name=cb_original" json:"cb_original,omitempty"`
	CbCompressed     *uint32 `protobuf:"varint,5,opt,name=cb_compressed" json:"cb_compressed,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ContentManifestPayload_FileMapping_ChunkData) Reset() {
	*m = ContentManifestPayload_FileMapping_ChunkData{}
}
func (m *ContentManifestPayload_FileMapping_ChunkData) String() string {
	return proto.CompactTextString(m)
}
func (*ContentManifestPayload_FileMapping_ChunkData) ProtoMessage() {}
func (*ContentManifestPayload_FileMapping_ChunkData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 0, 0}
}

func (m *ContentManifestPayload_FileMapping_ChunkData) GetSha() []byte {
	if m != nil {
		return m.Sha
	}
	return nil
}

func (m *ContentManifestPayload_FileMapping_ChunkData) GetCrc() uint32 {
	if m != nil && m.Crc != nil {
		return *m.Crc
	}
	return 0
}

func (m *ContentManifestPayload_FileMapping_ChunkData) GetOffset() uint64 {
	if m != nil && m.Offset != nil {
		return *m.Offset
	}
	return 0
}

func (m *ContentManifestPayload_FileMapping_ChunkData) GetCbOriginal() uint32 {
	if m != nil && m.CbOriginal != nil {
		return *m.CbOriginal
	}
	return 0
}

func (m *ContentManifestPayload_FileMapping_ChunkData) GetCbCompressed() uint32 {
	if m != nil && m.CbCompressed != nil {
		return *m.CbCompressed
	}
	return 0
}

type ContentManifestMetadata struct {
	DepotId            *uint32 `protobuf:"varint,1,opt,name=depot_id" json:"depot_id,omitempty"`
	GidManifest        *uint64 `protobuf:"varint,2,opt,name=gid_manifest" json:"gid_manifest,omitempty"`
	CreationTime       *uint32 `protobuf:"varint,3,opt,name=creation_time" json:"creation_time,omitempty"`
	FilenamesEncrypted *bool   `protobuf:"varint,4,opt,name=filenames_encrypted" json:"filenames_encrypted,omitempty"`
	CbDiskOriginal     *uint64 `protobuf:"varint,5,opt,name=cb_disk_original" json:"cb_disk_original,omitempty"`
	CbDiskCompressed   *uint64 `protobuf:"varint,6,opt,name=cb_disk_compressed" json:"cb_disk_compressed,omitempty"`
	UniqueChunks       *uint32 `protobuf:"varint,7,opt,name=unique_chunks" json:"unique_chunks,omitempty"`
	CrcEncrypted       *uint32 `protobuf:"varint,8,opt,name=crc_encrypted" json:"crc_encrypted,omitempty"`
	CrcClear           *uint32 `protobuf:"varint,9,opt,name=crc_clear" json:"crc_clear,omitempty"`
	XXX_unrecognized   []byte  `json:"-"`
}

func (m *ContentManifestMetadata) Reset()                    { *m = ContentManifestMetadata{} }
func (m *ContentManifestMetadata) String() string            { return proto.CompactTextString(m) }
func (*ContentManifestMetadata) ProtoMessage()               {}
func (*ContentManifestMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ContentManifestMetadata) GetDepotId() uint32 {
	if m != nil && m.DepotId != nil {
		return *m.DepotId
	}
	return 0
}

func (m *ContentManifestMetadata) GetGidManifest() uint64 {
	if m != nil && m.GidManifest != nil {
		return *m.GidManifest
	}
	return 0
}

func (m *ContentManifestMetadata) GetCreationTime() uint32 {
	if m != nil && m.CreationTime != nil {
		return *m.CreationTime
	}
	return 0
}

func (m *ContentManifestMetadata) GetFilenamesEncrypted() bool {
	if m != nil && m.FilenamesEncrypted != nil {
		return *m.FilenamesEncrypted
	}
	return false
}

func (m *ContentManifestMetadata) GetCbDiskOriginal() uint64 {
	if m != nil && m.CbDiskOriginal != nil {
		return *m.CbDiskOriginal
	}
	return 0
}

func (m *ContentManifestMetadata) GetCbDiskCompressed() uint64 {
	if m != nil && m.CbDiskCompressed != nil {
		return *m.CbDiskCompressed
	}
	return 0
}

func (m *ContentManifestMetadata) GetUniqueChunks() uint32 {
	if m != nil && m.UniqueChunks != nil {
		return *m.UniqueChunks
	}
	return 0
}

func (m *ContentManifestMetadata) GetCrcEncrypted() uint32 {
	if m != nil && m.CrcEncrypted != nil {
		return *m.CrcEncrypted
	}
	return 0
}

func (m *ContentManifestMetadata) GetCrcClear() uint32 {
	if m != nil && m.CrcClear != nil {
		return *m.CrcClear
	}
	return 0
}

type ContentManifestSignature struct {
	Signature        []byte `protobuf:"bytes,1,opt,name=signature" json:"signature,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ContentManifestSignature) Reset()                    { *m = ContentManifestSignature{} }
func (m *ContentManifestSignature) String() string            { return proto.CompactTextString(m) }
func (*ContentManifestSignature) ProtoMessage()               {}
func (*ContentManifestSignature) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ContentManifestSignature) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func init() {
	proto.RegisterType((*ContentManifestPayload)(nil), "ContentManifestPayload")
	proto.RegisterType((*ContentManifestPayload_FileMapping)(nil), "ContentManifestPayload.FileMapping")
	proto.RegisterType((*ContentManifestPayload_FileMapping_ChunkData)(nil), "ContentManifestPayload.FileMapping.ChunkData")
	proto.RegisterType((*ContentManifestMetadata)(nil), "ContentManifestMetadata")
	proto.RegisterType((*ContentManifestSignature)(nil), "ContentManifestSignature")
}

var fileDescriptor0 = []byte{
	// 397 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x91, 0xbf, 0xae, 0xd3, 0x30,
	0x14, 0xc6, 0x49, 0x9b, 0xe4, 0x26, 0x27, 0x09, 0xba, 0xf8, 0xc2, 0x25, 0x2a, 0x0b, 0xba, 0x2c,
	0x5d, 0x9a, 0x01, 0x89, 0x91, 0x85, 0x22, 0xc4, 0x52, 0x09, 0x89, 0x07, 0x88, 0x8c, 0xe3, 0xa4,
	0x56, 0x13, 0x3b, 0xd8, 0xce, 0x50, 0x26, 0x56, 0x9e, 0x91, 0x57, 0xe0, 0x21, 0xb0, 0x9d, 0x3f,
	0x54, 0x15, 0xc3, 0x1d, 0xbf, 0xcf, 0x27, 0xe7, 0xfb, 0x9d, 0x2f, 0x70, 0x4f, 0x04, 0xd7, 0x94,
	0xeb, 0xb2, 0xc3, 0x9c, 0xd5, 0x54, 0xe9, 0xa2, 0x97, 0x42, 0x8b, 0x87, 0xdf, 0x2b, 0xb8, 0xdf,
	0x8f, 0x4f, 0x87, 0xe9, 0xe5, 0x0b, 0x3e, 0xb7, 0x02, 0x57, 0xe8, 0x1d, 0x44, 0x1d, 0xee, 0x7b,
	0xc6, 0x1b, 0x95, 0x7b, 0xaf, 0xd7, 0xdb, 0xe4, 0xed, 0x9b, 0xe2, 0xff, 0xa3, 0xc5, 0x27, 0xd6,
	0xd2, 0xc3, 0x38, 0xbb, 0xf9, 0xb5, 0x82, 0xe4, 0x42, 0xa3, 0x5b, 0x88, 0x6a, 0x23, 0x39, 0xee,
	0xa8, 0x59, 0xe3, 0x6d, 0x63, 0x94, 0x82, 0xaf, 0xd8, 0x0f, 0x9a, 0xaf, 0x8c, 0xf2, 0x51, 0x06,
	0x41, 0xdd, 0x62, 0x93, 0xb1, 0x36, 0x32, 0x43, 0xcf, 0x21, 0x55, 0x47, 0x5c, 0x2e, 0x9f, 0xf8,
	0xc6, 0x4d, 0xd1, 0x1d, 0x24, 0xd6, 0x9d, 0x8e, 0xc8, 0x03, 0x67, 0xbe, 0x87, 0x90, 0x1c, 0x07,
	0x7e, 0x52, 0x79, 0xe8, 0xf0, 0x76, 0x8f, 0xc0, 0x2b, 0xf6, 0xf6, 0x8b, 0x8f, 0x58, 0xe3, 0x0d,
	0x86, 0x78, 0x11, 0x28, 0x81, 0xb5, 0x09, 0x70, 0x80, 0xa9, 0x15, 0x44, 0x12, 0xc7, 0x77, 0x83,
	0x9e, 0x42, 0x28, 0xea, 0x5a, 0x51, 0xed, 0x00, 0x7d, 0x8b, 0x42, 0xbe, 0x95, 0x42, 0xb2, 0x86,
	0x71, 0xdc, 0x3a, 0xbe, 0x0c, 0xbd, 0x80, 0xcc, 0x98, 0x44, 0x74, 0xbd, 0xa4, 0x4a, 0xd1, 0xca,
	0x11, 0x66, 0x0f, 0x7f, 0x3c, 0x78, 0x79, 0xc5, 0x74, 0xa0, 0x1a, 0x57, 0x36, 0xd1, 0xf4, 0x52,
	0xd1, 0x5e, 0xe8, 0x92, 0x55, 0x2e, 0xd6, 0x9d, 0xde, 0xb0, 0x6a, 0xf9, 0x43, 0x53, 0x3f, 0x76,
	0xb5, 0xa4, 0x58, 0x33, 0xc1, 0x4b, 0xcd, 0x4c, 0x23, 0x63, 0x4f, 0xaf, 0xe0, 0x6e, 0xee, 0x48,
	0x95, 0x94, 0x13, 0x79, 0xee, 0xb5, 0xc9, 0xb5, 0x38, 0x11, 0xca, 0xe1, 0xd6, 0xe0, 0x54, 0x4c,
	0x9d, 0xfe, 0x81, 0x06, 0x6e, 0xdb, 0x06, 0xd0, 0xfc, 0x72, 0x41, 0x1b, 0xce, 0x49, 0x03, 0x67,
	0xdf, 0x07, 0x5a, 0x4e, 0xb5, 0xde, 0x2c, 0xb7, 0x49, 0x72, 0x91, 0x11, 0x39, 0xfb, 0x19, 0xc4,
	0xd6, 0x26, 0x2d, 0xc5, 0x32, 0x8f, 0xdd, 0xb9, 0x3b, 0xc8, 0xaf, 0xae, 0xfd, 0xca, 0x1a, 0x8e,
	0xf5, 0x20, 0xa9, 0x1d, 0x57, 0xb3, 0x18, 0x6b, 0xfe, 0x10, 0x7c, 0xf6, 0x7e, 0x7a, 0x4f, 0xfe,
	0x06, 0x00, 0x00, 0xff, 0xff, 0x45, 0x63, 0xca, 0x80, 0x9b, 0x02, 0x00, 0x00,
}
